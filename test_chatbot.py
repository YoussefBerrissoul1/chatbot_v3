"""
test_chatbot.py
---------------
Script de test automatique du chatbot RH Nestl√© avec timer et rebuild
"""

import time
import argparse
from chatbot import ChatbotRH


def test_questions(chatbot: ChatbotRH, questions: list) -> dict:
    """
    Teste une liste de questions et retourne les statistiques.
    
    Args:
        chatbot: Instance du chatbot RH
        questions: Liste des questions √† tester
        
    Returns:
        dict: Statistiques des tests
    """
    total = len(questions)
    bien_comprises = 0
    reponses_directes = 0
    suggestions = 0
    incomprises = 0
    
    print("\nüìä D√©but des tests...\n")
    
    for i, q in enumerate(questions, 1):
        print(f"üîπ Q{i}: {q}")
        reponse = chatbot.generer_reponse(q)
        print(f"üî∏ R√©ponse: {reponse}\n")
        
        # Classification des r√©ponses
        if "üéØ" in reponse:
            bien_comprises += 1
            reponses_directes += 1
        elif "ü§î" in reponse:
            bien_comprises += 1
            suggestions += 1
        elif "‚ùå" in reponse:
            incomprises += 1
    
    # Statistiques
    stats = {
        "total": total,
        "bien_comprises": bien_comprises,
        "reponses_directes": reponses_directes,
        "suggestions": suggestions,
        "incomprises": incomprises,
        "taux_comprehension": (bien_comprises / total) * 100 if total > 0 else 0
    }
    
    return stats


def afficher_resultats(stats: dict, temps_demarrage: float) -> None:
    """
    Affiche les r√©sultats d√©taill√©s des tests.
    
    Args:
        stats: Statistiques des tests
        temps_demarrage: Temps de d√©marrage du chatbot
    """
    print("=" * 50)
    print("üìã R√âSULTATS DES TESTS")
    print("=" * 50)
    print(f"‚è±Ô∏è  Temps de d√©marrage     : {temps_demarrage:.2f} secondes")
    print(f"üìä Questions test√©es      : {stats['total']}")
    print(f"üéØ R√©ponses directes      : {stats['reponses_directes']}")
    print(f"ü§î Suggestions propos√©es  : {stats['suggestions']}")
    print(f"‚ùå Questions incomprises  : {stats['incomprises']}")
    print(f"‚úÖ Questions comprises    : {stats['bien_comprises']}/{stats['total']}")
    print(f"üìà Taux de compr√©hension  : {stats['taux_comprehension']:.1f}%")
    
    # √âvaluation de la performance
    if stats['taux_comprehension'] >= 80:
        print("üèÜ Performance : EXCELLENTE")
    elif stats['taux_comprehension'] >= 60:
        print("üëç Performance : BONNE")
    elif stats['taux_comprehension'] >= 40:
        print("‚ö†Ô∏è  Performance : MOYENNE")
    else:
        print("‚ö†Ô∏è  Performance : √Ä AM√âLIORER")


def main():
    """
    Fonction principale du script de test.
    """
    parser = argparse.ArgumentParser(
        description="Test automatique du chatbot RH Nestl√©"
    )
    parser.add_argument(
        "--rebuild", 
        action="store_true", 
        help="Reconstruire les index FAISS"
    )
    parser.add_argument(
        "--questions-file", 
        type=str, 
        help="Fichier JSON contenant les questions de test"
    )
    parser.add_argument(
        "--verbose", 
        action="store_true", 
        help="Affichage d√©taill√© des r√©ponses"
    )
    
    args = parser.parse_args()
    
    # Questions de test par d√©faut
    questions_defaut = [
        "Comment postuler chez Nestl√© ?",
        "Quels sont les crit√®res pour une alternance ?",
        "Quels sont les d√©lais de r√©ponse apr√®s une candidature ?",
        "Comment modifier ma candidature ?",
        "Est-ce que je peux passer plusieurs entretiens ?",
        "Comment puis-je poser mes cong√©s ?",
        "Quels sont les avantages d'un contrat CDI ?",
        "Est-ce que je peux avoir un bulletin de paie imprim√© ?",
        "Que faire en cas de retard de paie ?",
        "Combien de jours de t√©l√©travail sont autoris√©s ?",
        "Nestl√© propose-t-il une mutuelle sant√© ?",
        "Mon salaire est-il vers√© √† la fin du mois ?",
        "Puis-je faire une demande d'avancement ?",
        "Y a-t-il une politique de travail hybride ?",
        "Comment faire si je suis victime de harc√®lement ?"
    ]
    
    # Chargement des questions depuis un fichier si sp√©cifi√©
    if args.questions_file:
        try:
            import json
            with open(args.questions_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                questions = data.get('questions', questions_defaut)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du chargement du fichier : {e}")
            print("üìã Utilisation des questions par d√©faut...")
            questions = questions_defaut
    else:
        questions = questions_defaut
    
    # Initialisation du chatbot avec timer
    print("üöÄ Lancement du chatbot RH avec timer...")
    if args.rebuild:
        print("‚ôªÔ∏è Mode REBUILD activ√© - Reconstruction des index FAISS")
    
    t0 = time.time()
    
    try:
        chatbot = ChatbotRH()
        chatbot.initialiser(rebuild_index=args.rebuild)
        
        t1 = time.time()
        temps_demarrage = t1 - t0
        
        print(f"\n‚úÖ D√©marrage termin√© en {temps_demarrage:.2f} secondes")
        
        # Ex√©cution des tests
        stats = test_questions(chatbot, questions)
        
        # Affichage des r√©sultats
        afficher_resultats(stats, temps_demarrage)
        
        # Affichage des statistiques du chatbot
        print("\nüìä STATISTIQUES DU CHATBOT :")
        chatbot.afficher_statistiques()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution : {e}")
        return 1
    


if __name__ == "__main__":
    exit(main())
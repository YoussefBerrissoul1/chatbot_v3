"""
chatbot_optimized.py 
=======================================
Chatbot RH Nestl√© avec correction orthographique compatible
"""

import json
import pickle
import numpy as np
from datetime import datetime
from collections import defaultdict
import os
import sys

# Import des modules de machine learning
try:
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.metrics.pairwise import cosine_similarity
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.naive_bayes import MultinomialNB
    from sklearn.linear_model import LogisticRegression
    from sklearn.metrics import accuracy_score, classification_report
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False
    print("‚ö†Ô∏è Modules ML non disponibles - fonctionnalit√© limit√©e")

# Import du correcteur orthographique
try:
    from spellchecker import preprocess_question
    SPELLCHECKER_AVAILABLE = True
except ImportError:
    SPELLCHECKER_AVAILABLE = False
    print("‚ö†Ô∏è Correcteur orthographique non disponible")
    
    # Fonction fallback si le module n'est pas disponible
    def preprocess_question(texte: str) -> str:
        return texte.lower().strip()

class ChatbotRH:
    """Chatbot RH intelligent avec apprentissage automatique"""
    
    def __init__(self, fichier_donnees="donnees_rh.json", dossier_modeles="modeles_ml"):
        """Initialise le chatbot avec les donn√©es RH"""
        self.fichier_donnees = fichier_donnees
        self.dossier_modeles = dossier_modeles
        self.donnees = {}
        self.vectorizer = None
        self.classificateur = None
        self.questions_incomprises = []
        self.historique_conversations = []
        self.seuil_confiance = 0.3
        self.stats = {
            "questions_posees": 0,
            "reponses_trouvees": 0,
            "questions_incomprises": 0,
            "themes_populaires": defaultdict(int)
        }
        
        # Cr√©er le dossier mod√®les s'il n'existe pas
        if not os.path.exists(self.dossier_modeles):
            os.makedirs(self.dossier_modeles)
        
        # Charger les donn√©es et mod√®les
        self.charger_donnees()
        if ML_AVAILABLE:
            self.charger_ou_entrainer_modeles()
    
    def charger_donnees(self):
        """Charge les donn√©es depuis le fichier JSON"""
        try:
            with open(self.fichier_donnees, 'r', encoding='utf-8') as f:
                self.donnees = json.load(f)
            print(f"‚úÖ Donn√©es charg√©es : {len(self.donnees)} cat√©gories")
        except FileNotFoundError:
            print(f"‚ùå Fichier {self.fichier_donnees} non trouv√©")
            self.creer_donnees_exemple()
        except json.JSONDecodeError:
            print(f"‚ùå Erreur de format JSON dans {self.fichier_donnees}")
            self.creer_donnees_exemple()
    
    def creer_donnees_exemple(self):
        """Cr√©e des donn√©es d'exemple si le fichier n'existe pas"""
        print("üîÑ Cr√©ation des donn√©es d'exemple...")
        self.donnees = {
            "cong√©s": [
                {"question": "comment demander cong√©s", "reponse": "Pour demander des cong√©s, connectez-vous √† votre espace RH et remplissez le formulaire de demande de cong√©s."},
                {"question": "solde cong√©s pay√©s", "reponse": "Votre solde de cong√©s pay√©s est visible dans votre espace personnel RH."},
                {"question": "cong√©s maladie", "reponse": "En cas de maladie, pr√©venez votre manager et envoyez votre arr√™t de travail aux RH."}
            ],
            "salaire": [
                {"question": "bulletin paie", "reponse": "Votre bulletin de paie est disponible dans votre espace RH en format PDF."},
                {"question": "augmentation salaire", "reponse": "Les discussions sur les augmentations se font lors de votre entretien annuel."},
                {"question": "primes", "reponse": "Les primes sont calcul√©es selon vos objectifs et la performance de l'entreprise."}
            ],
            "formation": [
                {"question": "formation professionnelle", "reponse": "Consultez le catalogue de formations disponible dans votre espace RH."},
                {"question": "cpf compte personnel formation", "reponse": "Vous pouvez utiliser votre CPF pour financer certaines formations."},
                {"question": "d√©veloppement comp√©tences", "reponse": "Parlez √† votre manager de vos besoins en d√©veloppement de comp√©tences."}
            ],
            "t√©l√©travail": [
                {"question": "t√©l√©travail remote", "reponse": "Le t√©l√©travail est possible selon votre poste et avec accord de votre manager."},
                {"question": "horaires flexibles", "reponse": "Les horaires flexibles sont possibles selon votre fonction et √©quipe."},
                {"question": "travail distance", "reponse": "Le travail √† distance suit des r√®gles sp√©cifiques d√©finies par l'entreprise."}
            ]
        }
        
        # Sauvegarder les donn√©es d'exemple
        with open(self.fichier_donnees, 'w', encoding='utf-8') as f:
            json.dump(self.donnees, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ Donn√©es d'exemple cr√©√©es")
    
    def charger_ou_entrainer_modeles(self):
        """Charge les mod√®les existants ou les entra√Æne"""
        chemin_vectorizer = os.path.join(self.dossier_modeles, "vectorizer.pkl")
        chemin_classificateur = os.path.join(self.dossier_modeles, "classificateur.pkl")
        
        if os.path.exists(chemin_vectorizer) and os.path.exists(chemin_classificateur):
            try:
                with open(chemin_vectorizer, 'rb') as f:
                    self.vectorizer = pickle.load(f)
                with open(chemin_classificateur, 'rb') as f:
                    self.classificateur = pickle.load(f)
                print("‚úÖ Mod√®les charg√©s depuis le cache")
                return
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du chargement : {e}")
        
        # Entra√Æner les mod√®les
        print("üîÑ Entra√Ænement des mod√®les...")
        self.entrainer_modeles()
        print("‚úÖ Mod√®les entra√Æn√©s et sauvegard√©s")
    
    def entrainer_modeles(self):
        """Entra√Æne les mod√®les de machine learning"""
        if not ML_AVAILABLE:
            print("‚ö†Ô∏è ML non disponible - utilisation des m√©thodes basiques")
            return
        
        # Pr√©parer les donn√©es d'entra√Ænement
        textes = []
        labels = []
        
        for theme, questions in self.donnees.items():
            for item in questions:
                textes.append(item["question"])
                labels.append(theme)
        
        if not textes:
            print("‚ùå Aucune donn√©e d'entra√Ænement disponible")
            return
        
        # Vectorisation
        self.vectorizer = TfidfVectorizer(
            max_features=1000,
            ngram_range=(1, 2),
            stop_words=None  # Pas de stop words pour le fran√ßais
        )
        
        X = self.vectorizer.fit_transform(textes)
        y = labels
        
        # Entra√Ænement du classificateur
        self.classificateur = RandomForestClassifier(n_estimators=100, random_state=42)
        self.classificateur.fit(X, y)
        
        # Sauvegarde des mod√®les
        with open(os.path.join(self.dossier_modeles, "vectorizer.pkl"), 'wb') as f:
            pickle.dump(self.vectorizer, f)
        with open(os.path.join(self.dossier_modeles, "classificateur.pkl"), 'wb') as f:
            pickle.dump(self.classificateur, f)
    
    def detecter_theme(self, question: str) -> str:
        """D√©tecte le th√®me de la question"""
        if not ML_AVAILABLE or not self.vectorizer or not self.classificateur:
            # M√©thode basique par mots-cl√©s
            return self.detecter_theme_basique(question)
        
        try:
            # Vectorisation de la question
            question_vectorisee = self.vectorizer.transform([question])
            
            # Pr√©diction
            theme_predit = self.classificateur.predict(question_vectorisee)[0]
            
            # Mise √† jour des stats
            self.stats["themes_populaires"][theme_predit] += 1
            
            return theme_predit
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur de d√©tection ML : {e}")
            return self.detecter_theme_basique(question)
    
    def detecter_theme_basique(self, question: str) -> str:
        """D√©tection basique par mots-cl√©s"""
        question_lower = question.lower()
        
        # Mots-cl√©s pour chaque th√®me
        themes_mots_cles = {
            "cong√©s": ["cong√©", "cong√©s", "vacances", "repos", "arr√™t", "absence"],
            "salaire": ["salaire", "paie", "r√©mun√©ration", "augmentation", "prime"],
            "formation": ["formation", "cours", "stage", "apprentissage", "cpf"],
            "t√©l√©travail": ["t√©l√©travail", "remote", "distance", "horaires", "flexible"],
            "g√©n√©ral": []
        }
        
        # Compter les occurrences
        scores = {}
        for theme, mots_cles in themes_mots_cles.items():
            score = sum(1 for mot in mots_cles if mot in question_lower)
            if score > 0:
                scores[theme] = score
        
        # Retourner le th√®me avec le meilleur score
        if scores:
            theme_detecte = max(scores, key=scores.get)
            self.stats["themes_populaires"][theme_detecte] += 1
            return theme_detecte
        else:
            return "g√©n√©ral"
    
    def trouver_meilleure_reponse(self, question: str) -> tuple:
        """Trouve la meilleure r√©ponse pour une question"""
        meilleure_reponse = "Je ne sais pas r√©pondre √† cette question."
        meilleur_score = 0.0
        
        theme = self.detecter_theme(question)
        
        # Chercher dans le th√®me d√©tect√© d'abord
        if theme in self.donnees:
            for item in self.donnees[theme]:
                score = self.calculer_similarite(question, item["question"])
                if score > meilleur_score:
                    meilleur_score = score
                    meilleure_reponse = item["reponse"]
        
        # Si le score est trop faible, chercher dans tous les th√®mes
        if meilleur_score < self.seuil_confiance:
            for theme_data in self.donnees.values():
                for item in theme_data:
                    score = self.calculer_similarite(question, item["question"])
                    if score > meilleur_score:
                        meilleur_score = score
                        meilleure_reponse = item["reponse"]
        
        return meilleure_reponse, meilleur_score
    
    def calculer_similarite(self, question1: str, question2: str) -> float:
        """Calcule la similarit√© entre deux questions"""
        if not ML_AVAILABLE or not self.vectorizer:
            # M√©thode basique
            return self.calculer_similarite_basique(question1, question2)
        
        try:
            # Vectorisation des questions
            vecteurs = self.vectorizer.transform([question1, question2])
            
            # Calcul de la similarit√© cosinus
            similarite = cosine_similarity(vecteurs[0:1], vecteurs[1:2])[0][0]
            
            return similarite
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur de calcul de similarit√© : {e}")
            return self.calculer_similarite_basique(question1, question2)
    
    def calculer_similarite_basique(self, question1: str, question2: str) -> float:
        """Calcule la similarit√© basique entre deux questions"""
        mots1 = set(question1.lower().split())
        mots2 = set(question2.lower().split())
        
        if not mots1 and not mots2:
            return 1.0
        if not mots1 or not mots2:
            return 0.0
        
        # Calcul de l'intersection et de l'union
        intersection = len(mots1.intersection(mots2))
        union = len(mots1.union(mots2))
        
        return intersection / union if union > 0 else 0.0
    
    def generer_reponse(self, question: str) -> str:
        """G√©n√®re une r√©ponse √† la question de l'utilisateur"""
        self.stats["questions_posees"] += 1
        
        if not question.strip():
            return "‚ö†Ô∏è Veuillez poser une question."
        
        # üî• CORRECTION : Utiliser le correcteur orthographique
        question_originale = question
        question_corrigee = preprocess_question(question)
        
        # Afficher la correction seulement si diff√©rente
        if question_originale.strip() != question_corrigee.strip():
            print(f"üìù Correction: '{question_originale}' ‚Üí '{question_corrigee}'")
        
        # D√©tecter le th√®me (utiliser la version corrig√©e)
        theme = self.detecter_theme(question_corrigee)
        
        # Trouver la meilleure r√©ponse (utiliser la version corrig√©e)
        reponse, score = self.trouver_meilleure_reponse(question_corrigee)
        
        # Enregistrer dans l'historique
        self.historique_conversations.append({
            "timestamp": datetime.now().isoformat(),
            "question_originale": question_originale,
            "question_corrigee": question_corrigee,
            "theme": theme,
            "reponse": reponse,
            "score": score
        })
        
        # Afficher des informations de debug
        print(f"üìÅ Th√®me d√©tect√©: {theme.replace('_', ' ').title()}")
        print(f"üéØ Score de confiance: {score:.2f}")
        
        if score >= self.seuil_confiance:
            self.stats["reponses_trouvees"] += 1
            return f"‚úÖ {reponse}"
        else:
            self.stats["questions_incomprises"] += 1
            self.enregistrer_question_incomprise(question_corrigee, theme)
            return (f"‚ùå Je n'ai pas bien compris votre question (score: {score:.2f}).\n"
                   f"Voici quand m√™me ma meilleure suggestion :\n{reponse}\n\n"
                   f"üí° Essayez de reformuler votre question ou d'√™tre plus sp√©cifique.")
    
    def enregistrer_question_incomprise(self, question: str, theme: str):
        """Enregistre une question non comprise pour am√©lioration future"""
        self.questions_incomprises.append({
            "question": question,
            "theme_suggere": theme,
            "timestamp": datetime.now().isoformat()
        })
        
        # Sauvegarder dans un fichier
        try:
            with open("questions_incomprises.json", "w", encoding="utf-8") as f:
                json.dump(self.questions_incomprises, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur sauvegarde questions incomprises : {e}")
    
    def afficher_stats(self):
        """Affiche les statistiques du chatbot"""
        print("\n" + "="*50)
        print("üìä STATISTIQUES DU CHATBOT")
        print("="*50)
        print(f"Questions pos√©es: {self.stats['questions_posees']}")
        print(f"R√©ponses trouv√©es: {self.stats['reponses_trouvees']}")
        print(f"Questions incomprises: {self.stats['questions_incomprises']}")
        
        if self.stats['questions_posees'] > 0:
            taux_reussite = (self.stats['reponses_trouvees'] / self.stats['questions_posees']) * 100
            print(f"Taux de r√©ussite: {taux_reussite:.1f}%")
        
        print(f"Seuil de confiance: {self.seuil_confiance}")
        print(f"Correcteur orthographique: {'‚úÖ' if SPELLCHECKER_AVAILABLE else '‚ùå'}")
        print(f"Machine Learning: {'‚úÖ' if ML_AVAILABLE else '‚ùå'}")
        
        if self.stats['themes_populaires']:
            print("\nTh√®mes populaires:")
            for theme, count in sorted(self.stats['themes_populaires'].items(), key=lambda x: x[1], reverse=True):
                print(f"  {theme}: {count} questions")
        
        print("="*50)
    
    def tester_modele(self):
        """Teste le mod√®le avec des questions d'exemple"""
        questions_test = [
            "CONGES",
            "Puis-je travailler",
            "Comment demander des cong√©s?",
            "Quel est mon salaire?",
            "Formation disponible",
            "T√©l√©travail possible?",
            "Coment faire demande cong√©",
            "Probl√®me avec mon manageur"
        ]
        
        print("\n" + "="*50)
        print("üß™ TEST DU MOD√àLE")
        print("="*50)
        
        for i, question in enumerate(questions_test, 1):
            print(f"\n{i}. Question: {question}")
            reponse = self.generer_reponse(question)
            print(f"   R√©ponse: {reponse}")
            print("-" * 40)
    
    def ajuster_seuil_confiance(self, nouveau_seuil: float):
        """Ajuste le seuil de confiance"""
        if 0.0 <= nouveau_seuil <= 1.0:
            self.seuil_confiance = nouveau_seuil
            print(f"‚úÖ Seuil de confiance ajust√© √† {nouveau_seuil}")
        else:
            print("‚ùå Le seuil doit √™tre entre 0.0 et 1.0")
    
    def sauvegarder_historique(self):
        """Sauvegarde l'historique des conversations"""
        try:
            with open("historique_conversations.json", "w", encoding="utf-8") as f:
                json.dump(self.historique_conversations, f, ensure_ascii=False, indent=2)
            print("‚úÖ Historique sauvegard√©")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde historique : {e}")
    
    def charger_historique(self):
        """Charge l'historique des conversations"""
        try:
            with open("historique_conversations.json", "r", encoding="utf-8") as f:
                self.historique_conversations = json.load(f)
            print(f"‚úÖ Historique charg√© : {len(self.historique_conversations)} conversations")
        except FileNotFoundError:
            print("üìù Aucun historique existant")
        except Exception as e:
            print(f"‚ùå Erreur chargement historique : {e}")

def main():
    """Fonction principale du chatbot"""
    print("üöÄ Initialisation du Chatbot RH Nestl√©...")
    
    # Cr√©er l'instance du chatbot
    chatbot = ChatbotRH()
    
    # Charger l'historique
    chatbot.charger_historique()
    
    print("‚úÖ Chatbot initialis√© avec les mod√®les sauvegard√©s")
    print("\nüí¨ Chatbot RH Nestl√© - Version Optimis√©e")
    print("Tapez 'exit', 'quit' ou 'test' pour les options sp√©ciales")
    
    try:
        while True:
            # Demander une question √† l'utilisateur
            question = input("\nVous: ").strip()
            
            # Commandes sp√©ciales
            if question.lower() in ['exit', 'quit', 'quitter']:
                print("üëã Au revoir ! Sauvegarde en cours...")
                chatbot.sauvegarder_historique()
                chatbot.afficher_stats()
                break
            
            elif question.lower() == 'test':
                chatbot.tester_modele()
                continue
            
            elif question.lower() == 'stats':
                chatbot.afficher_stats()
                continue
            
            elif question.lower().startswith('seuil'):
                try:
                    # Commande: seuil 0.4
                    parts = question.split()
                    if len(parts) == 2:
                        nouveau_seuil = float(parts[1])
                        chatbot.ajuster_seuil_confiance(nouveau_seuil)
                    else:
                        print("Usage: seuil 0.4")
                except ValueError:
                    print("‚ùå Valeur invalide pour le seuil")
                continue
            
            elif question.lower() == 'help':
                print("\nüîß Commandes disponibles:")
                print("  - exit/quit : Quitter le chatbot")
                print("  - test : Tester le mod√®le")
                print("  - stats : Afficher les statistiques")
                print("  - seuil X : Ajuster le seuil de confiance (ex: seuil 0.4)")
                print("  - help : Afficher cette aide")
                continue
            
            # Traiter la question normale
            if question:
                reponse = chatbot.generer_reponse(question)
                print(f"\nü§ñ Chatbot: {reponse}")
            else:
                print("‚ö†Ô∏è Veuillez poser une question.")
    
    except KeyboardInterrupt:
        print("\n\nüõë Arr√™t du chatbot...")
        chatbot.sauvegarder_historique()
        chatbot.afficher_stats()
    
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue : {e}")
        chatbot.sauvegarder_historique()
        chatbot.afficher_stats()

if __name__ == "__main__":
    main()